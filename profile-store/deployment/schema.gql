type Query {
    getUserProfile(userId: Long!): UserProfile
    getArtistRecommendations(
        userId: Long!,
        field: FieldType!=ARTIST,
        limit: Int,
        walks: Int,
        walkLength: Int,
        resetProbability: Float
    ):  Recommendations @rest(url: "http://quick-app-recommender/recommendation",
        pathParameter: ["userId", "field"],
        queryParameter: ["limit", "walks", "walkLength", "resetProbability"])

}

type Subscription {
    listeningEventUpdate: ListeningEvent @topic(name: "listeningevents")
}

type Mutation {
    sendListeningEvent(userId: Long!, event: ListeningEventInput!): ListeningEvent @topic(name: "listeningevents")
}

enum FieldType {
    ARTIST
    ALBUM
    TRACK
}

type Recommendations {
    recommendations: [Recommendation!]!
}

type Recommendation {
    id: Long!
    artist: Item @topic(name: "artists", keyField: "id")
}

type UserProfile {
    totalListenCount: Long! @topic(name: "counts", keyArgument: "userId")
    firstListenEvent: Long! @topic(name: "firstlisten", keyArgument: "userId")
    lastListenEvent: Long! @topic(name: "lastlisten", keyArgument: "userId")
    artistCharts: NamedArtistCharts! @topic(name: "topartists", keyArgument: "userId")
    albumCharts: NamedAlbumCharts! @topic(name: "topalbums", keyArgument: "userId")
    trackCharts: NamedTrackCharts! @topic(name: "toptracks", keyArgument: "userId")
}

type ListeningEvent {
    userId: Long!
    artistId: Long!
    albumId: Long!
    trackId: Long!
    timestamp: Long!
    artist: Item @topic(name: "artists", keyField: "artistId")
    album: Item @topic(name: "albums", keyField: "albumId")
    track: Item @topic(name: "tracks", keyField: "trackId")
}

input ListeningEventInput {
    userId: Long!
    artistId: Long!
    albumId: Long!
    trackId: Long!
    timestamp: Long!
}

type Item {
    id: Long!
    name: String!
}

type Charts {
    topK: [ChartRecord!]!
}

type ChartRecord {
    id: Long!
    countPlays: Long!
}

type NamedArtistCharts {
    topK: [NamedArtistCount!]!
}

type NamedAlbumCharts {
    topK: [NamedAlbumCount!]!
}

type NamedTrackCharts {
    topK: [NamedTrackCount!]!
}

type NamedArtistCount {
    id: Long!
    artist: Item! @topic(name: "artists", keyField: "id")
    countPlays: Long!
}

type NamedAlbumCount {
    id: Long!
    album: Item! @topic(name: "albums", keyField: "id")
    countPlays: Long!
}

type NamedTrackCount {
    id: Long!
    track: Item! @topic(name: "tracks", keyField: "id")
    countPlays: Long!
}
